package day02;

public class BitOperator {
    public static void main(String[] args) {
        //비트연산자
        byte a = 5; // 0000 0101
        byte b = 3; // 0000 0011

        // & (비트곱) : 각 비트 자리수를 곱하세요.
        System.out.println(a & b); // & 의 피연산자가 정수 이므로 비트연산자
         // -> 0000 0001 = 1

        // |(비트합) : 각 비트 자리수를 더하세요. 단 1+1 = 1로 처리
        System.out.println(a | b);
        // -> 0000 0111 = 7

        // -> 0000 0110
        // ^(배타적 논리합) : 각 비트 자리수를 비교해서 다르면 1 같으면 0 (배타적이면 1, 아니면 0)
        System.out.println(a ^ b);

        //비트 이동 연산
        // << : 왼쪽으로 이동 -> 2의 이동숫자만큼 제곱으로 곱해라
        // >> : 오른쪽으로 이동 -> 2의 이동숫자만큼 제곱으로 나눠라

        // 00000000 00000000 00000000 11000000
        int x = 192 ;

        // 00000000 00000000 00000110 00000000 (왼쪽으로 3칸 이동)
        System.out.println(x << 3); // 192 * (2**3) => 192 * 8 = 1536

        // 00000000 00000000 00000000 00110000
        System.out.println(x >> 2); // 192 / (2**2) => 192 / 4 = 48

        // 비트 반전 연산자 (~) 단항 연산자
        int y = 8; // 0000 1000
        System.out.println(~y); // 1111 0111 // 음수를 변환하려면 2의 보수 표기 법 사용
                                // 1의보수 -> 1(부호)0001000
                                // 2의 보수 -> 1(부호)0001001 (+1)

    }
}
